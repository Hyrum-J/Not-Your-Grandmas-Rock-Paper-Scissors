use sdl2::{pixels::Color, rect::Rect, event::Event, keyboard::Keycode, video::Window,};
use std::time::Duration;

//pub trait selection_boxes
//{

//}


//Main function
fn main() {
    //an instance of the sdl2 library
    let sdl_context = sdl2::init().unwrap();
    //The video of the sdl2 from sdl context
    let video_subsystem = sdl_context.video().unwrap();

    //Create a window for our game
    let mut window = video_subsystem.window("Not Your Grandmas Rock Paper Scissors", 800, 600)
        .position_centered()
        .build()
        .unwrap();

    //Create a canvas on the window
    let mut canvas = window.into_canvas().build().unwrap();

    //Square size variable
    let square_size: u32 = 20;

    let mut x_pos: i32 = 100;

    let mut y_pos: i32 = 480;

    let firstX: i32 = 107;

    let secondX: i32 = 154;

    let thirdX: i32 = 201;

    let fourthX: i32 = 248;

    let fifthX: i32 = 295;

    let sixthX: i32 = 342;

    let optionsY: i32 = 330;

    let boxSize: u32 = 40;

    let mut group: i16 = 1;

    //Create a square in the position of 35, 23, with a size of the square size
    let square = Rect::new(x_pos, y_pos, square_size, square_size);

    let background = Rect::new(0, 0, 800, 600);

    let boxBottom = Rect::new(50, 500, 700, 50);

    let boxTop = Rect::new(50, 50, 700, 50);

    let boxLeft = Rect::new(50, 50, 50, 450);

    let boxRight = Rect::new(700, 50, 50, 450);

    let divider = Rect::new(390, 300, 20, 200);

    let rockSquare = Rect::new(firstX, optionsY, boxSize, boxSize);

    let fireSquare = Rect::new(secondX, optionsY, boxSize, boxSize);

    let scissorSquare = Rect::new(thirdX, optionsY, boxSize, boxSize);

    let snakeSquare = Rect::new(fourthX, optionsY, boxSize, boxSize);

    let humanSquare = Rect::new(fifthX, optionsY, boxSize, boxSize);

    let treeSquare = Rect::new(firstX, optionsY, boxSize, boxSize);

    let wolfSquare = Rect::new(secondX, optionsY, boxSize, boxSize);

    let spongeSquare = Rect::new(thirdX, optionsY, boxSize, boxSize);

    let paperSquare = Rect::new(fourthX, optionsY, boxSize, boxSize);

    let airSquare = Rect::new(fifthX, optionsY, boxSize, boxSize);

    let waterSquare = Rect::new(firstX, optionsY, boxSize, boxSize);

    let dragonSquare = Rect::new(secondX, optionsY, boxSize, boxSize);

    let devilSquare = Rect::new(thirdX, optionsY, boxSize, boxSize);

    let lightningSquare = Rect::new(fourthX, optionsY, boxSize, boxSize);

    let gunSquare = Rect::new(fifthX, optionsY, boxSize, boxSize);

    let switchSquare = Rect::new(sixthX, optionsY, boxSize, boxSize);

    //Sets color to blue
    canvas.set_draw_color(Color::RGB(255,255,255));

    canvas.fill_rect(background);

    canvas.set_draw_color(Color::RGB(0,0,0));

    canvas.fill_rect(boxBottom);

    canvas.fill_rect(boxTop);

    canvas.fill_rect(boxLeft);

    canvas.fill_rect(boxRight);

    canvas.fill_rect(divider);

    canvas.set_draw_color(Color::RGB(255,0,0));

    canvas.fill_rect(rockSquare);

    canvas.fill_rect(fireSquare);

    canvas.fill_rect(scissorSquare);

    canvas.fill_rect(snakeSquare);

    canvas.fill_rect(humanSquare);

    canvas.fill_rect(switchSquare);

    canvas.set_draw_color(Color::RGB(0,255,200));

    //Fills the square with the color
    canvas.fill_rect(square).unwrap();

    //Presents canvas
    canvas.present();

    //Allows events to happen 
    let mut event_pump = sdl_context.event_pump().unwrap();

    //Checks to see if the exit button is pressed
    'running: loop{
        for event in event_pump.poll_iter()
        {
            match event {
                Event::Quit{..}|
                Event::KeyUp{keycode: Some(Keycode::Escape), ..} => {
                    break 'running;
                },

                Event::KeyUp{keycode: Some(Keycode::W), ..} => {

                    for i in 1..15
                    {
                    canvas.set_draw_color(Color::RGB(0,0,0));
                    canvas.clear();

                    y_pos -= 10;

                    canvas.set_draw_color(Color::RGB(255,255,255));

                    canvas.fill_rect(background);

                    canvas.set_draw_color(Color::RGB(0,0,0));

                    canvas.fill_rect(boxBottom);

                    canvas.fill_rect(boxTop);

                    canvas.fill_rect(boxLeft);

                    canvas.fill_rect(boxRight);

                    canvas.fill_rect(divider);

                    if group == 1
                    {
                        canvas.set_draw_color(Color::RGB(255,0,0));

                        canvas.fill_rect(rockSquare);

                        canvas.fill_rect(fireSquare);

                        canvas.fill_rect(scissorSquare);

                        canvas.fill_rect(snakeSquare);

                        canvas.fill_rect(humanSquare);

                        canvas.fill_rect(switchSquare);
                    }
                    else if group == 2
                    {
                        canvas.set_draw_color(Color::RGB(0,255,0));

                        canvas.fill_rect(treeSquare);

                        canvas.fill_rect(wolfSquare);

                        canvas.fill_rect(spongeSquare);

                        canvas.fill_rect(paperSquare);

                        canvas.fill_rect(airSquare);

                        canvas.fill_rect(switchSquare);
                    }
                    else if group == 3
                    {
                        canvas.set_draw_color(Color::RGB(0,0,255));

                        canvas.fill_rect(waterSquare);

                        canvas.fill_rect(dragonSquare);

                        canvas.fill_rect(devilSquare);

                        canvas.fill_rect(lightningSquare);

                        canvas.fill_rect(gunSquare);

                        canvas.fill_rect(switchSquare);
                    }

                    canvas.set_draw_color(Color::RGB(0, 255, 200));
                    canvas.fill_rect(Rect::new(x_pos, y_pos, square_size, square_size));

                    canvas.present();
                    std::thread::sleep(Duration::from_millis(16));
                    }

                    if x_pos > sixthX && x_pos < sixthX + 40 && y_pos > optionsY
                    {
                        group += 1;
                        if group > 3
                        {
                            group = 1;
                        }
                    }
                    else if group == 1
                    {
                        if x_pos > fifthX && x_pos < fifthX + 40 && y_pos > optionsY
                        {
                            println!("Human");
                        }
                        else if x_pos > fourthX && x_pos < fourthX + 40 && y_pos > optionsY
                        {
                            println!("Snake");
                        }
                        else if x_pos > thirdX && x_pos < thirdX + 40 && y_pos > optionsY
                        {
                            println!("Scissors");
                        }
                        else if x_pos > secondX && x_pos < secondX + 40 && y_pos > optionsY
                        {
                            println!("Fire");
                        }
                        else if x_pos > firstX && x_pos < firstX + 40 && y_pos > optionsY
                        {
                            println!("Rock");
                        }
                    }
                    else if group == 2
                    {
                        if x_pos > fifthX && x_pos < fifthX + 40 && y_pos > optionsY
                        {
                            println!("Air");
                        }
                        else if x_pos > fourthX && x_pos < fourthX + 40 && y_pos > optionsY
                        {
                            println!("Paper");
                        }
                        else if x_pos > thirdX && x_pos < thirdX + 40 && y_pos > optionsY
                        {
                            println!("Sponge");
                        }
                        else if x_pos > secondX && x_pos < secondX + 40 && y_pos > optionsY
                        {
                            println!("Wolf");
                        }
                        else if x_pos > firstX && x_pos < firstX + 40 && y_pos > optionsY
                        {
                            println!("Tree");
                        }
                    }
                    else if group == 3
                    {
                        if x_pos > fifthX && x_pos < fifthX + 40 && y_pos > optionsY
                        {
                            println!("Gun");
                        }
                        else if x_pos > fourthX && x_pos < fourthX + 40 && y_pos > optionsY
                        {
                            println!("Lightning");
                        }
                        else if x_pos > thirdX && x_pos < thirdX + 40 && y_pos > optionsY
                        {
                            println!("Devil");
                        }
                        else if x_pos > secondX && x_pos < secondX + 40 && y_pos > optionsY
                        {
                            println!("Dragon");
                        }
                        else if x_pos > firstX && x_pos < firstX + 40 && y_pos > optionsY
                        {
                            println!("Water");
                        }
                    }

                    for i in 1..15
                    {
                    canvas.set_draw_color(Color::RGB(0,0,0));
                    canvas.clear();

                    y_pos += 10;

                    canvas.set_draw_color(Color::RGB(255,255,255));

                    canvas.fill_rect(background);

                    canvas.set_draw_color(Color::RGB(0,0,0));

                    canvas.fill_rect(boxBottom);

                    canvas.fill_rect(boxTop);

                    canvas.fill_rect(boxLeft);

                    canvas.fill_rect(boxRight);

                    canvas.fill_rect(divider);

                    if group == 1
                    {
                        canvas.set_draw_color(Color::RGB(255,0,0));

                        canvas.fill_rect(rockSquare);

                        canvas.fill_rect(fireSquare);

                        canvas.fill_rect(scissorSquare);

                        canvas.fill_rect(snakeSquare);

                        canvas.fill_rect(humanSquare);

                        canvas.fill_rect(switchSquare);
                    }
                    else if group == 2
                    {
                        canvas.set_draw_color(Color::RGB(0,255,0));

                        canvas.fill_rect(treeSquare);

                        canvas.fill_rect(wolfSquare);

                        canvas.fill_rect(spongeSquare);

                        canvas.fill_rect(paperSquare);

                        canvas.fill_rect(airSquare);

                        canvas.fill_rect(switchSquare);
                    }
                    else if group == 3
                    {
                        canvas.set_draw_color(Color::RGB(0,0,255));

                        canvas.fill_rect(waterSquare);

                        canvas.fill_rect(dragonSquare);

                        canvas.fill_rect(devilSquare);

                        canvas.fill_rect(lightningSquare);

                        canvas.fill_rect(gunSquare);

                        canvas.fill_rect(switchSquare);
                    }

                    canvas.set_draw_color(Color::RGB(0, 255, 200));
                    canvas.fill_rect(Rect::new(x_pos, y_pos, square_size, square_size));

                    canvas.present();
                    std::thread::sleep(Duration::from_millis(16));
                    }
                }

                Event::KeyDown{keycode: Some(Keycode::A), ..} => {

                    if(x_pos > 100)
                    {
                        canvas.set_draw_color(Color::RGB(0,0,0));
                        canvas.clear();

                        x_pos -= 10;

                        canvas.set_draw_color(Color::RGB(255,255,255));

                        canvas.fill_rect(background);

                        canvas.set_draw_color(Color::RGB(0,0,0));

                        canvas.fill_rect(boxBottom);

                        canvas.fill_rect(boxTop);

                        canvas.fill_rect(boxLeft);

                        canvas.fill_rect(boxRight);

                        canvas.fill_rect(divider);

                        canvas.set_draw_color(Color::RGB(255,0,0));

                        if group == 1
                        {
                            canvas.set_draw_color(Color::RGB(255,0,0));

                            canvas.fill_rect(rockSquare);

                            canvas.fill_rect(fireSquare);

                            canvas.fill_rect(scissorSquare);

                            canvas.fill_rect(snakeSquare);

                            canvas.fill_rect(humanSquare);

                            canvas.fill_rect(switchSquare);
                        }
                        else if group == 2
                        {
                            canvas.set_draw_color(Color::RGB(0,255,0));

                            canvas.fill_rect(treeSquare);

                            canvas.fill_rect(wolfSquare);

                            canvas.fill_rect(spongeSquare);

                            canvas.fill_rect(paperSquare);

                             canvas.fill_rect(airSquare);

                             canvas.fill_rect(switchSquare);
                        }
                         else if group == 3
                        {
                        canvas.set_draw_color(Color::RGB(0,0,255));

                        canvas.fill_rect(waterSquare);

                        canvas.fill_rect(dragonSquare);

                        canvas.fill_rect(devilSquare);

                        canvas.fill_rect(lightningSquare);

                        canvas.fill_rect(gunSquare);

                        canvas.fill_rect(switchSquare);
                    }

                        canvas.set_draw_color(Color::RGB(0, 255, 200));
                        canvas.fill_rect(Rect::new(x_pos, y_pos, square_size, square_size));

                        canvas.present();
                    }
                }

                Event::KeyDown{keycode: Some(Keycode::D), ..} => {

                    if(x_pos < 370)
                    {
                        canvas.set_draw_color(Color::RGB(0,0,0));
                        canvas.clear();

                        x_pos += 10;

                        canvas.set_draw_color(Color::RGB(255,255,255));

                        canvas.fill_rect(background);

                        canvas.set_draw_color(Color::RGB(0,0,0));

                        canvas.fill_rect(boxBottom);

                        canvas.fill_rect(boxTop);

                        canvas.fill_rect(boxLeft);

                        canvas.fill_rect(boxRight);

                        canvas.fill_rect(divider);

                        canvas.set_draw_color(Color::RGB(255,0,0));

                        if group == 1
                    {
                        canvas.set_draw_color(Color::RGB(255,0,0));

                        canvas.fill_rect(rockSquare);

                        canvas.fill_rect(fireSquare);

                        canvas.fill_rect(scissorSquare);

                        canvas.fill_rect(snakeSquare);

                        canvas.fill_rect(humanSquare);

                        canvas.fill_rect(switchSquare);
                    }
                    else if group == 2
                    {
                        canvas.set_draw_color(Color::RGB(0,255,0));

                        canvas.fill_rect(treeSquare);

                        canvas.fill_rect(wolfSquare);

                        canvas.fill_rect(spongeSquare);

                        canvas.fill_rect(paperSquare);

                        canvas.fill_rect(airSquare);

                        canvas.fill_rect(switchSquare);
                    }
                    else if group == 3
                    {
                        canvas.set_draw_color(Color::RGB(0,0,255));

                        canvas.fill_rect(waterSquare);

                        canvas.fill_rect(dragonSquare);

                        canvas.fill_rect(devilSquare);

                        canvas.fill_rect(lightningSquare);

                        canvas.fill_rect(gunSquare);

                        canvas.fill_rect(switchSquare);
                    }

                        canvas.set_draw_color(Color::RGB(0, 255, 200));
                        canvas.fill_rect(Rect::new(x_pos, y_pos, square_size, square_size));

                        canvas.present();
                    }
                }

                _ => {}

                
            }
        }
    }
}

